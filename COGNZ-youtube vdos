REMEMBER
1.USE HAVING UNDER GROUP BY filtering
2.IF WE USE COUNT,SUM,MAX MEANS ..THERE WE HAVE TO USE GROUP BY
3.USE FETCH FIRST 5 ROWS ONLY .....INSTEAD OF LIMIT
4.use datatype DATE in ANSISQL
5.<>=not equal
6.Avoid usng alaising name
7.In joins always check the tablename is accessed in every place
1.%2 = 0
2.LENGTH ()
3.'a%b'...starts with a but ends with b
In MySQL there is no wildcards
4.WHERE CITY REGEXP '^[aeiouAEIOU]'...starts with
  '[aeiouAEIOU]$'...endswith
  
 '^[aeiouAEIOU]'.*  '[aeiouAEIOU]$'.. .startswithand endwith any vowels
5.CONCAT(firstname, ' ',lastname)
6.specify alais if we use subquery as table
SELECT department_id,
       employee_id,
       salary
FROM (
    SELECT e.*,
           RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rnk
    FROM employees e
) t.................................................in this query the select from table is created using subquery....so specify by any alias name like this t.
WHERE rnk <= 2;

1.
SELECT categoryid, categoryname
FROM cartoon
WHERE categoryname LIKE 'M%';

2.
SELECT transactionid AS TRANSACTION_ID,
       amount AS TRANSACTION_AMOUNT, 
       transactiontype AS TRANSACTION_TYPE 
FROM transactions
WHERE transactiontype = 'Debit'
  AND amount > 10000 
  AND amount < 50000;
3.
 SELECT c.First_Name AS FIRST_NAME,
         c.Contact AS CONTACT,
         a.Balance AS BALANCE
  FROM customer c
  JOIN account a ON c.Customer_ID = a.Customer_ID
  JOIN  account_type at ON a.Account_Type_ID = at.Account_Type_ID
  WHERE at.Account_type_Name LIKE 'Sa%'
  ORDER BY c.First_Name;

4.PRINT DETAILS OF WORKER FIRST NAME ENDS WITH H AND CONTAIN 6 ALPHABETS
 SELECT*
 FROM Customers
 WHERE firstname LIKE '_____h';

5.Write an SQL query to print details of the Workers whose FIRST_NAME contains 'a'.

SELECT*
FROM Workers
WHERE FIRST_NAME LIKE '%a%';

6.Write an SQL query to fetch the no. of workers for each department in the descending order.

  SELECT department,COUNT(*) AS no_of_workers
  FROM workers
  GROUP BY department
  ORDER BY no_of_workers DESC;//ORDER BY COUNT(*) DESC...ANSI SQL OLD

7.Write an SQL query to print details of the Workers who have joined in Feb'2014

SELECT *
FROM Customers
WHERE joiningdate BETWEEN DATE '2014-02-01' AND DATE '2014-02-28';

(or)
WHERE joiningdate >= DATE '2014-02-01'AND joiningdate <  DATE '2014-03-01'..........use next month 1st date
//IN MYSQL NO NEED TO SPECIFY datatype DATE 

8.SELECT CURDATE();
  SELECT CURTIME();
  SELECT NOW();............to display date and time together

9. HIGHEST 5 SALARY EMPLOYEE DETAILS

SELECT *
FROM employee
ORDER BY salary DESC
FETCH FIRST 5 ROWS ONLY;.........................LIMIT IS NOT IN ANSISQL


10.5th HIGHEST SALARY

SELECT salary
FROM employee e1
WHERE 4 = (
    SELECT COUNT(DISTINCT salary)
    FROM employee e2
    WHERE e2.salary > e1.salary
);

11.Write an SQL query to fetch the list of employees with the same salary

SELECT w1.*....................return all colums of first table
FROM workers w1
JOIN workers w2........................joined with same table
ON w1.salary = w2.salary
WHERE w1.empid <> w2.empid;

12.Write an SQL query to fetch the departments that have less than 4 people in it.

 SELECT department,COUNT(department) AS peopcount
  FROM employee
  GROUP BY department
  HAVING COUNT(department) < 4;...............dont use aliases like we calculated peopcount

13.WRITE A SQL QUERY TO PRINT FIRSTNAME FROM WORKER TABLE AFTER REPLACING 'a','A'.

SELECT REPLACE(first_name,'a','A')
FROM workers;

14.Write an SQL query to display:
FLIGHT_ID, DEPARTURE_DATE, DEPARTURE_TIME, FLIGHT_FROM, FLIGHT_TO
The flight ID, departure date, departure time, departure location, and destination of fli departing after (2024-02-06).
Sort the results by departure time in ascending order.

SELECT flight_id,departure_date,departure_time,flight_from,flight_to
FROM flights
WHERE departure_date > '2024-02-06'
ORDER BY departure_time ASC;

15.PATIENTID, PAYMENTSTATUS, OUTSTANDING AMOUNT
The PatientID, PaymentStatus, and Outstanding Amount (use alias "Outstanding Amount") for patients whose bill has not been fully paid (i.e., PaidAmount is less than TotalAmount).
Note: Outstanding Amount = TotalAmount - PaidAmount

SELECT patient_id,paymentstatus,(Totalamount-paidamount) AS Outstanding_amount
FROM patients
WHERE paidamount < Totalamount;

16.COMBINE RESULT SET OF TWO SELECT STATEMENTS
SELECT first_name, age
FROM students

UNION

SELECT customer_name, customer_age
FROM customers;

17.DELETE ALL THE ROWS FROM TABLE BUT KEEP ITS STRUCTURE

TRUNCATE TABLE employee;

18.Write query to combine two rows with the help of Left Join.........two rows means one from 1st table and other from 2nd table

SELECT e.first_name,d.department_name
FROM employees AS e
LEFT JOIN departments AS d ON e.department_id = d.department_id;

19.Write an SQL query to display the user_id, first_name, and last_name of the top 5 users who have sent the most messages, 
along with the number of messages they have sent. The output should be sorted in descending order of user_id.

SELECT u.user_id,u.first_name,u.last_name,COUNT(m.message_id) AS messages_sent
FROM users u
JOIN messages m ON u.user_id = m.sender_id
GROUP BY u.user_id,u.first_name,u.last_name
ORDER BY u.user_id DESC
LIMIT 5;

20.QUERY THE TOTAL POPULATION OF ALL THE CITIES WHERE DISTICT IS CALIFORNIA

SELECT SUM(population) AS total_pop
FROM city
WHERE district = 'california';

21.QUERY to round the total value of lat to 2 decimal places

SELECT ROUND(SUM(lat), 2) AS value
FROM station;

22.SELECT first_name AS STAFF FIRST NAME,
         position AS POSITION,
         salary AS SALARY
  WHERE salary > 50000;

23.
SELECT empid AS EMPLOYEE_ID,
       empname AS EMPLOYEE_NAME
FROM employees
WHERE experience > 5 AND joindate > '2001-01-01';

24.
SELECT *
FROM employees 
WHERE joindate >= DATE_SUB(CURDATE(), INTERVAL 2 MONTH) 
   OR MONTH(joindate) BETWEEN 1 AND 3;

25...............................................joining three tables
SELECT c.course_id,c.course_name,sc.day,sc.starttime
  FROM section s
  JOIN course c ON s.course_id = c.course_id
  JOIN schedule sc ON sc.schedule_id = s.schedule_id
  WHERE sc.day = 'wednesday';

26....................................join column name is diff but same data
SELECT td.train_id, td.train_name
FROM train_details_tbl td
JOIN train_stations_tbl ts 
     ON td.train_to = ts.station_id
WHERE td.train_name LIKE 'M%'
  AND ts.station_name = 'PUNE';

27............................joining tables with two conditions 
  SELECT *
  FROM train_details_tbl t
  JOIN train_stations_tbl s
   ON t.train_from = s.station_id 
   OR t.train_to = s.station_id
  WHERE s.station_name LIKE '% %';

28.
SELECT DISTINCT h.hotel_id,h.hotel_name,h.rating
  FROM hotel_details h
  JOIN orders o
   ON h.hotel_id = o.hotel_id 
  WHERE MONTH(o.order_date) = 7
  ORDER BY h.hotel_id ASC;

29.
SELECT car_id, car_name, owner_id
FROM cars
WHERE car_type IN ('Hatchback', 'SUV')
ORDER BY car_id;

30.
SELECT  c.cust_name AS customer_name,
        c.city AS Customer_city,  
        s.name AS Salesman_name,
        s.commission AS Commision
FROM Customer c
JOIN Salesman s
ON c.salesman_id = s.salesman_id
WHERE s.commission > 0.12;

31....................first join using cust_id because of the (order and customer table)...the resultant is joined with salesman using salesman_id with order table not with customer...becauseof we need order details mentioned.
SELECT  o.ord_no AS order_no,
        o.ord_date AS order_date,  
        o.purch_amt AS purchase_amt,
        c.cust_name AS customer_name,
        s.name AS salesman_name,
        s.commission AS commission
FROM Orders o
JOIN Customer c
 ON o.customer_id = c.customer_id
JOIN salesman s 
 ON o.salesman_id = s.salesman_id;

32.2nd query

 SELECT t.train_name AS Train_name,   
         tt.type_description AS Description,
         ts.station_name AS start_station_name
  FROM train_details_td t
  JOIN train_type_tbl tt
    ON t.train_type = tt.train_type
  JOIN train_stations_tbl ts
    ON t.train_from = ts.station_id;

33............here three tables involved but marks only have cnnection with other 2 ....so first will be marks....and last table also joined with marks
  SELECT s.student_name AS NAME,
         sb.subject_name AS SUB_NAME,  
         m.value AS MARKS
  FROM Marks m
  JOIN Student s
    ON m.student_id = s.student_id
  JOIN Subject sb
    ON m.subject_id = sb.subject_id;


34................here why we use left join means it displays the dept with zero count also
SELECT d.department_name AS DEPT_NAME,
       COUNT(s.student_id) AS TOTAL_STUD
FROM Department d
LEFT JOIN Student s
       ON d.department_id = s.department_id
GROUP BY d.department_name;

35.

SELECT country,COUNT(playerid) AS Total_players
FROM players
GROUP BY country;

36.
SELECT a.name AS Animal_name,
         a.species AS species, 
         a.gender AS Gender,
         CONCAT(c.firstname,' ',c.lastname) AS caretaker_name
FROM Animals a
JOIN animal_caretaker ac ON a.animal_id = ac.animal_id
JOIN caretaker c ON ac.caretaker_id = c.caretaker_id
WHERE a.gender = 'Male';

FULL SQL QUERIES VDO......WATCH THERE....SOME I MENTION HERE

1.top 2 high salary of each dept
SELECT department_id,
       employee_id,
       salary
FROM (
    SELECT e.*,
           RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rnk
    FROM employees e
) t
WHERE rnk <= 2;

2.Earliest joined person in each dept

SELECT e.name,
       e.join_date,
       e.dept_id
FROM Employees e
JOIN Department d ON e.Dept_id = d.Dept_id
WHERE e.join_date = (
    SELECT MIN(join_date)
    FROM employees
    WHERE dept_id = e.dept_id
);

3.DEPARTMENT WITH NO EMPLOYEES
SELECT d.dept_name
FROM Department d
LEFT JOIN Employees e ON d.dept_id = e.dept_id
WHERE e.dept_id IS NULL;

or

SELECT dept_name
FROM Department
WHERE dept_id NOT IN (SELECT dept_id FROM Employees);











