REMEMBER
1.USE HAVING UNDER GROUP BY filtering
2.IF WE USE COUNT,SUM,MAX MEANS ..THERE WE HAVE TO USE GROUP BY
3.USE FETCH FIRST 5 ROWS ONLY .....INSTEAD OF LIMIT
4.use datatype DATE in ANSISQL
5.<>=not equal
6.Avoid usng alaising name
7.In joins always check the tablename is accessed in every place
1.
SELECT categoryid, categoryname
FROM cartoon
WHERE categoryname LIKE 'M%';

2.
SELECT transactionid AS TRANSACTION_ID,
       amount AS TRANSACTION_AMOUNT, 
       transactiontype AS TRANSACTION_TYPE 
FROM transactions
WHERE transactiontype = 'Debit'
  AND amount > 10000 
  AND amount < 50000;
3.
 SELECT c.First_Name AS FIRST_NAME,
         c.Contact AS CONTACT,
         a.Balance AS BALANCE
  FROM customer c
  JOIN account a ON c.Customer_ID = a.Customer_ID
  JOIN  account_type at ON a.Account_Type_ID = at.Account_Type_ID
  WHERE at.Account_type_Name LIKE 'Sa%'
  ORDER BY c.First_Name;

4.PRINT DETAILS OF WORKER FIRST NAME ENDS WITH H AND CONTAIN 6 ALPHABETS
 SELECT*
 FROM Customers
 WHERE firstname LIKE '_____h';

5.Write an SQL query to print details of the Workers whose FIRST_NAME contains 'a'.

SELECT*
FROM Workers
WHERE FIRST_NAME LIKE '%a%';

6.Write an SQL query to fetch the no. of workers for each department in the descending order.

  SELECT department,COUNT(*) AS no_of_workers
  FROM workers
  GROUP BY department
  ORDER BY no_of_workers DESC;//ORDER BY COUNT(*) DESC...ANSI SQL OLD

7.Write an SQL query to print details of the Workers who have joined in Feb'2014

SELECT *
FROM Customers
WHERE joiningdate BETWEEN DATE '2014-02-01' AND DATE '2014-02-28';

(or)
WHERE joiningdate >= DATE '2014-02-01'AND joiningdate <  DATE '2014-03-01'..........use next month 1st date
//IN MYSQL NO NEED TO SPECIFY datatype DATE 
8.SELECT CURRENT_DATE;
  SELECT CURRENT_TIME;
  SELECT CURRENT_TIMESTAMP;............to display date and time together

9. HIGHEST 5 SALARY EMPLOYEE DETAILS

SELECT *
FROM employee
ORDER BY salary DESC
FETCH FIRST 5 ROWS ONLY;.........................LIMIT IS NOT IN ANSISQL


10.5th HIGHEST SALARY

SELECT salary
FROM employee e1
WHERE 4 = (
    SELECT COUNT(DISTINCT salary)
    FROM employee e2
    WHERE e2.salary > e1.salary
);

11.Write an SQL query to fetch the list of employees with the same salary

SELECT w1.*....................return all colums of first table
FROM workers w1
JOIN workers w2........................joined with same table
ON w1.salary = w2.salary
WHERE w1.empid <> w2.empid;

12.Write an SQL query to fetch the departments that have less than 4 people in it.

 SELECT department,COUNT(department) AS peopcount
  FROM employee
  GROUP BY department
  HAVING COUNT(department) < 4;...............dont use aliases like we calculated peopcount

13.WRITE A SQL QUERY TO PRINT FIRSTNAME FROM WORKER TABLE AFTER REPLACING 'a','A'.

SELECT REPLACE(first_name,'a','A')
FROM workers;

14.Write an SQL query to display:
FLIGHT_ID, DEPARTURE_DATE, DEPARTURE_TIME, FLIGHT_FROM, FLIGHT_TO
The flight ID, departure date, departure time, departure location, and destination of fli departing after (2024-02-06).
Sort the results by departure time in ascending order.

SELECT flight_id,departure_date,departure_time,flight_from,flight_to
FROM flights
WHERE departure_date > '2024-02-06'
ORDER BY departure_time ASC;

15.PATIENTID, PAYMENTSTATUS, OUTSTANDING AMOUNT
The PatientID, PaymentStatus, and Outstanding Amount (use alias "Outstanding Amount") for patients whose bill has not been fully paid (i.e., PaidAmount is less than TotalAmount).
Note: Outstanding Amount = TotalAmount - PaidAmount

SELECT patient_id,paymentstatus,(Totalamount-paidamount) AS Outstanding_amount
FROM patients
WHERE paidamount < Totalamount;

16.COMBINE RESULT SET OF TWO SELECT STATEMENTS
SELECT first_name, age
FROM students

UNION

SELECT customer_name, customer_age
FROM customers;

17.DELETE ALL THE ROWS FROM TABLE BUT KEEP ITS STRUCTURE

TRUNCATE TABLE employee;

18.Write query to combine two rows with the help of Left Join.........two rows means one from 1st table and other from 2nd table

SELECT e.first_name,d.department_name
FROM employees AS e
LEFT JOIN departments AS d ON e.department_id = d.department_id;

19.Write an SQL query to display the user_id, first_name, and last_name of the top 5 users who have sent the most messages, 
along with the number of messages they have sent. The output should be sorted in descending order of user_id.

SELECT u.user_id,u.first_name,u.last_name,COUNT(m.message_id) AS messages_sent
FROM users u
JOIN messages m ON u.user_id = m.sender_id
GROUP BY u.user_id,u.first_name,u.last_name
ORDER BY u.user_id DESC
FETCH FIRST 5 ROWS ONLY;

20.QUERY THE TOTAL POPULATION OF ALL THE CITIES WHERE DISTICT IS CALIFORNIA

SELECT SUM(population) AS total_pop
FROM city
WHERE district = 'california';

21.QUERY to round the total value of lat to 2 decimal places

SELECT ROUND(SUM(lat), 2) AS value
FROM station;








